<?php

/**
 * The plugin bootstrap file
 *
 * This file is read by WordPress to generate the plugin information in the plugin
 * admin area. This file also includes all of the dependencies used by the plugin,
 * registers the activation and deactivation functions, and defines a function
 * that starts the plugin.
 *
 * @link              http://appiesoftwebsolutions.com/
 * @since             1.0.0
 * @package           Boxy_Woocommerce_Custom_Redirect_After_Checkout
 *
 * @wordpress-plugin
 * Plugin Name:       Boxy woocommerce custom redirect after checkout 
 * Plugin URI:        http://www.9infodev.com
 * Description:       This is a plugin used to redirect user to custom link after successful checkout.
 * Version:           1.0.1
 * Author:            Mandep singh Maan
 * Author URI:        http://appiesoftwebsolutions.com/
 * License:           GPL-2.0+
 * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 * Text Domain:       boxy woocommerce custom redirect after checkout 
 * Domain Path:       /languages
 */

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
	die;
}

/**
 * The code that runs during plugin activation.
 * This action is documented in includes/class-boxy woocommerce custom redirect after checkout -activator.php
 */
function activate_boxy() {
	require_once plugin_dir_path( __FILE__ ) . 'includes/class-boxy woocommerce custom redirect after checkout -activator.php';
	Boxy_Woocommerce_Custom_Redirect_After_Checkout_Activator::activate();
}

/**
 * The code that runs during plugin deactivation.
 * This action is documented in includes/class-boxy woocommerce custom redirect after checkout -deactivator.php
 */
function deactivate_boxy() {
	require_once plugin_dir_path( __FILE__ ) . 'includes/class-boxy woocommerce custom redirect after checkout -deactivator.php';
	Boxy_Woocommerce_Custom_Redirect_After_Checkout_Deactivator::deactivate();
}

register_activation_hook( __FILE__, 'activate_boxy' );
register_deactivation_hook( __FILE__, 'deactivate_boxy' );

/**
 * The core plugin class that is used to define internationalization,
 * admin-specific hooks, and public-facing site hooks.
 */
require plugin_dir_path( __FILE__ ) . 'includes/class-boxy woocommerce custom redirect after checkout .php';

/**
 * Begins execution of the plugin.
 *
 * Since everything within the plugin is registered via hooks,
 * then kicking off the plugin from this point in the file does
 * not affect the page life cycle.
 *
 * @since    1.0.0
 */
function run_boxy () {

	$plugin = new Boxy_Woocommerce_Custom_Redirect_After_Checkout();
	$plugin->run();

}

 /**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class BoxyWcRedirect {
	private $boxy_wc_redirect_options;

	public function __construct() {
		add_action( 'admin_menu', array( $this, 'boxy_wc_redirect_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'boxy_wc_redirect_page_init' ) );
	}

	public function boxy_wc_redirect_add_plugin_page() {
		add_options_page(
			'Boxy Wc Redirect', // page_title
			'Boxy Wc Redirect', // menu_title
			'manage_options', // capability
			'boxy-wc-redirect', // menu_slug
			array( $this, 'boxy_wc_redirect_create_admin_page' ) // function
		);
	}

	public function boxy_wc_redirect_create_admin_page() {
		$this->boxy_wc_redirect_options = get_option( 'boxy_wc_redirect_option_name' ); ?>

		<div class="wrap">
			<h2>Boxy Wc Redirect</h2>
			<p>Boxy Woo commerce Custom Redirect after Checkout</p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'boxy_wc_redirect_option_group' );
					do_settings_sections( 'boxy-wc-redirect-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }

	public function boxy_wc_redirect_page_init() {
		register_setting(
			'boxy_wc_redirect_option_group', // option_group
			'boxy_wc_redirect_option_name', // option_name
			array( $this, 'boxy_wc_redirect_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'boxy_wc_redirect_setting_section', // id
			'Settings', // title
			array( $this, 'boxy_wc_redirect_section_info' ), // callback
			'boxy-wc-redirect-admin' // page
		);

		add_settings_field(
			'enter_custom_url_0', // id
			'Enter Custom URL', // title
			array( $this, 'enter_custom_url_0_callback' ), // callback
			'boxy-wc-redirect-admin', // page
			'boxy_wc_redirect_setting_section' // section
		);
	}

	public function boxy_wc_redirect_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['enter_custom_url_0'] ) ) {
			$sanitary_values['enter_custom_url_0'] = sanitize_text_field( $input['enter_custom_url_0'] );
		}

		return $sanitary_values;
	}

	public function boxy_wc_redirect_section_info() {
		
	}

	public function enter_custom_url_0_callback() {
		printf(
			'<input class="regular-text" type="text" name="boxy_wc_redirect_option_name[enter_custom_url_0]" id="enter_custom_url_0" value="%s">',
			isset( $this->boxy_wc_redirect_options['enter_custom_url_0'] ) ? esc_attr( $this->boxy_wc_redirect_options['enter_custom_url_0']) : ''
		);
	}

}
if ( is_admin() )
	$boxy_wc_redirect = new BoxyWcRedirect();

 $boxy_wc_redirect_options = get_option( 'boxy_wc_redirect_option_name' ); // Array of All Options
 $enter_custom_url_0 = $boxy_wc_redirect_options['enter_custom_url_0']; // Enter Custom URL
 // Redirect custom thank you
 
add_action( 'woocommerce_thankyou', 'bbloomer_redirectcustom');
function bbloomer_redirectcustom( $order_id ){
    $order = new WC_Order( $order_id );
    $boxy_wc_redirect_options = get_option( 'boxy_wc_redirect_option_name' ); // Array of All Options
    $enter_custom_url_0 = $boxy_wc_redirect_options['enter_custom_url_0']; // Enter Custom URL
    $url =$enter_custom_url_0;
  
 
    if ( $order->status != 'failed' ) {
        wp_redirect($url);
    }
}